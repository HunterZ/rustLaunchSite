# Example rustLaunchSite config file

# Usage: Configure settings as desired for your server, then pass this file's
#  path/name to rustLaunchSite as its only parameter whenever you run it

# NOTES:
#  - Optional settings can be omitted or commented out
#  - Setting values must be of the specified type
#  - "Disabled" means omitting/commenting an optional setting, specifying a
#     value of false for a boolean, or specifying the documented disabling value
#     for other setting types

# Required group: These are settings that control rustLaunchSite behavior
rustLaunchSite:
{
  # Required group: server install settings
  install:
  {
    # Required string: Rust dedicated server install base path
    # NOTES:
    #  - Used both internally and for passing to steamcmd for updates
    #  - Backslashes must be doubled to avoid config file parsing issues
    #  - Path should end in a double-slash; rustLaunchSite will correct this,
    #     but will complain about it
    path = "C:\\Games\\rustserver\\";
    # Required string: ID used to store server-specific data when maintaining
    #  multiple servers under the same dedicated server software installation
    # NOTE: Server-specific files end up under `<path>/server/<identity>`. Used
    #  internally and passed to server as `+server.identity`
    identity = "server1";
  };
  # Required group: rustLaunchSite path settings
  paths:
  {
    # Required string: File that rustLaunchSite should use to cache data that
    #  needs to persist across runs (e.g. last used seed settings, last seen
    #  client-server protocol version, etc.)
    # NOTES:
    #  - rustLaunchSite must have the ability to read and write this file
    #  - rustLaunchSite will attempt to create this file as needed if it does
    #     not exist
    #  - Backslashes must be doubled to avoid config file parsing issues
    cache = "C:\\Games\\rustserver\\rustLaunchSite\\rlscache.cfg";
    # Required string: Directory that rustLaunchSite should use for temporary
    #  downloads (e.g. Oxide releases)
    # NOTES:
    #  - Directory must exist, or errors / reduced functionality may occur
    #  - rustLaunchSite must have the ability to create and delete files in this
    #     directory as needed
    #  - Backslashes must be doubled to avoid config file parsing issues
    #  - Path should end in a double-slash; rustLaunchSite will correct this,
    #     but will complain about it
    download = "C:\\Games\\rustserver\\rustLaunchSite\\";
  };
  # Optional group: Server process (re)start/shutdown settings; if omitted, the
  #  contained settings will be considered disabled
  # NOTE: See `rustDedicated` section for sever command-line parameter settings
  process:
  {
    # Optional boolean: true if rustLaunchSite should attempt to automatically
    #  restart the server when unexpected termination is detected; if disabled,
    #  rustLaunchSite will also terminate when the server terminates, as it
    #  would otherwise no longer be performing any useful function.
    # NOTE: This is equivalent to the `goto` feature commonly used in shell
    #  scripts to help keep a server running
    autoRestart = true;
    # Optional integer: If set to a positive value, rustLaunchSite-managed
    #  server shutdowns will be announced and delayed by the specified number of
    #  seconds when players are online in order to give them a chance to get to
    #  safety; if omitted, or disabled via a non-positive value, server
    #  shutdowns will always occur immediately and without warning
    # NOTES:
    #  - The delay only applies when players are connected; shutdowns while the
    #     server is idle will occur without delay in order to minimize downtime
    #  - Countdown notifications will be broadcast to users when the delay
    #     starts and at the following intervals/marks, depending on how much
    #     time is left:
    #    - Over 5 minutes: once at every 5 minute mark
    #    - 1 to 5 minutes: once at every 1 minute mark
    #    - 10 to 60 seconds: once at every 10 second mark
    #    - 0 to 10 seconds: once at every 1 second mark
    shutdownDelaySeconds = 300;
  };
  # Required group: RCON settings, used by rustLaunchSite to communicate with
  #  the server when it is running, and also to synchronize configuration
  #  between the two when possible
  rcon:
  {
    # Required string: RCON password used by rustLaunchSite and passed to server
    #  as `+rcon.password`
    password = "CHANGETHIS";
    # Required string: RCON IP used for rustLaunchSite to connect to server
    #  RCON
    # NOTES:
    # - This may differ from the IP that the server binds locally
    # - A hostname may also work here, but has not been tested
    ip = "127.0.0.1";
    # Required integer: RCON port used for rustLaunchSite to connect to server
    #  RCON
    # NOTE: This may differ form the port that the server binds locally
    port = 28016;
    # Optional group: Settings that control whether RCON endpoint configuration
    #  is also passed to the Rust dedicated server; if omitted, the contained
    #  settings will be considered disabled
    # NOTES:
    #  - passthrough synchronizes/simplifies things if rustLaunchSite and the
    #     sever are running in the same network enclave
    #  - RCON password is always synchronized, because there's no valid use case
    #     case for rustLaunchSite and the dedicated server having different RCON
    #     passwords
    passthrough:
    {
      # Optional boolean: If true, pass above RCON IP to server as `+rcon.ip`;
      #  if disabled, rustLaunchSite will not derive server RCON IP from the
      #  corresponding setting above
      ip = true;
      # Optional boolean: if true, pass above rcon port to server as
      #  `+rcon.port`; if disabled, rustLaunchSite will not derive server RCON
      #  port from the corresponding setting above
      port = true;
    };
    # Optional boolean: If true, received broadcast/non-response RCON messages
    #  will be logged for debugging purposes
    log = true;
  };
  # Optional group: Map seed determination settings; if omitted, random seed
  #  generation will be used
  # NOTES:
  #  - A new seed will be generated via the configured strategy when any of the
  #     following conditions occur:
  #    - rustLaunchSite is launched without seed settings in its cache (e.g. on
  #       first run)
  #    - automatic wipe handling is triggered
  #    - seed generation configuration is changed to something incompatible
  #       (e.g. changing strategy, modifying the seed list to no longer contain
  #       the seed that was previously in use, etc.)
  #  - You can always switch to fixed seed mode to ensure that the seed that was
  #     previously in effect remains in effect, regardless of which strategy was
  #     used to generate it in the first place
  #  - These settings merely determine which seed value is passed to the server;
  #     whether or not this results in the map being regenerated is therefore
  #     ultimately up to the server, and not rustLaunchSite (unless of course it
  #     coincides with automatic wipe handling)
  seed:
  {
    # Optional string: Strategy used to generate a new seed to use whenever
    #  rustLaunchSite determines one is needed; if omitted, "random" will be
    #  assumed
    # NOTES:
    #  - The following values are supported:
    #    - "fixed" : use the specified fixed seed
    #    - "list"  : starting with the first entry, rotate through the given
    #                 list whenever a new seed is needed
    #    - "random": pick a random seed value to be used until the next wipe
    #  - Any other values will result in a fatal error on rustLaunchSite startup
    #  - If this is changed between runs, a new seed will be determined via the
    #     newly-chosed strategy; this will likely trigger a new map to be
    #     generated, so be careful
    strategy = "fixed";
    # Conditional integer: Seed to be used for "fixed" strategy; required for
    #  said strategy, and ignored for others
    fixed = 12763030;
    # Conditional integer array: Seeds to be used for "list" strategy; an array
    #  containing at least one seed is required for said strategy, and ignored
    #  for others
    # NOTE: The last-used seed is cached and used to determine array index; if
    #  it is removed from the list, rustLaunchSite will reset the seed to the
    #  first one in the array as soon as possible (likely on next server
    #  (re)start)
    list = [ 6956722, 29106779, 90753170 ];
  };
  # Optional group: Automatic update settings; if omitted, the contained
  #  settings will be considered disabled
  update:
  {
    # Optional boolean: true if rustLaunchSite should check for dedicated server
    #  version updates every time the server is (re)launched by invoking
    #  steamcmd; if disabled, server updates will only occur if/when periodic
    #  runtime checking detects the need
    # NOTE: it is recommended to keep this disabled for faster restarts, unless
    #  you actually experience install corruption and want to run steamcmd's
    #  install validation process on every launch, or if you only want to check
    #  for server updates when the server is restarted for other reasons
    onLaunch = false;
    # Optional boolean: true if rustLaunchSite should automatically monitor for
    #  dedicated server version updates while the server is running, and restart
    #  to install them when detected; if disabled, periodic checking will not
    #  occur, and thus the server will also never be automatically restarted for
    #  server version updates
    # NOTES:
    #  - when an update is detected, rustLaunchSite will attempt to gracefully
    #     shut down the server, install the update, and restart the server
    #  - `onLaunch` can be disabled if this is in use, as they effectively
    #     accomplish the same thing
    #  - server's Steam app manifest file will be queried for SteamCMD tool path
    #     and (if applicable) beta branch
    server = true;
    # Optional boolean: true if rustLaunchSite should automatically monitor for
    #  Oxide version updates while the server is running, and restart to install
    #  them when detected; if disabled, periodic checking will not occur, and
    #  thus the server will also never be automatically restarted for Oxide
    #  version updates
    # NOTES:
    #  - Oxide update check/install functionality will be disabled if no Oxide
    #     installation is detected
    #  - when an update is detected, rustLaunchSite will attempt to gracefully
    #     shut down the server, install the update, and restart the server
    #  - disable this if you want to run a 100% vanilla server without even any
    #     admin-only mods
    oxide = true;
    # Optional integer: Interval in minutes at which enabled update checks
    #  should occur while the server is running; omitting or setting to a
    #  non-positive value will disable all run-time update checking
    # NOTE: There's probably no point in setting this lower than 5, as some of
    #  the backend services used don't update their caches more frequently than
    #  that (plus it's not polite to hammer them anyway).
    intervalMinutes = 15;
  };
  # Optional group: Automatic wipe handling settings; if omitted, the contained
  #  settings will be considered disabled
  wipe:
  {
    # Optional boolean: true if wipe actions should be performed when a server
    #  protocol version change is detected; if disabled, automatic wipe actions
    #  will not be performed at all, as this is currently the only automatic
    #  wipe trigger supported by rustLaunchSite
    # NOTES:
    #  - This wipe trigger is meant to detect monthly updates from Facepunch, as
    #     they typically update the client-server protocol version at this time
    #  - This condition can currently only be detected by rustLaunchSite
    #     querying the protocol version via RCON once the server has started, so
    #     two server restarts will likely occur after an automatic update that
    #     results in a new protocol version (and likely a third sometime later
    #     if automatic Oxide updates are also enabled)
    onProtocolChange = true;

    # Optional boolean: true if user blueprint progress should be wiped; if
    #  disabled, blueprints will be retained across wipes
    # NOTE: Facepunch occasionally forces blueprint wipes regardless of this
    blueprints = true;
  };
};

# Optional group: Settings that determine how rustLaunchSite will launch the
#  Rust dedicated server application; if omitted, interactive mode will be
#  disabled, and no explicit parameters will be passed to the server on launch
#  (which will probably result in a failed run, but ensuring that a workable set
#  is specified is not the responsibility of rustLaunchSite)
# NOTES:
#  - `minusParams` and `plusParams` can be used to pass arbitrary parameters to
#     the server application on launch (see
#     https://developer.valvesoftware.com/wiki/Rust_Dedicated_Server and/or
#     https://wiki.facepunch.com/rust/Creating-a-server);
#  - Some parameters may be populated automatically by rustLaunchSite depending
#     on how it is configured, so you may not need to specify those again here.
#     These include but may not belimited to: `+server.seed`,
#     `+server.identity`, `+rcon.port`, `+rcon.password`, and `+rcon.web`
#  - You can define arbitrary parameters as follows: Starting at the third level
#     below, level names will be concatenated with period `.` characters. For
#     example, `plusParams{server{worldsize = 3000}}` will get passed as
#     `+server.worldsize 3000`
#  - Boolean (true/false) values assigned to a parameter will control whether
#     the parameter itself is included or not; no value will accompany it on the
#     command line. You can of course also simply omit (or comment out) any
#     parameter from this config file to prevent passing it to the server
rustDedicated:
{
  # Optional group: Parameters that should be passed to the server application
  #  with a minus sign `-` prefix
  minusParams:
  {
    # true to suppress GUI
    batchmode = true;
    # path/name of server log file
    # NOTE: backslashes must be doubled to avoid config file parsing issues
    logfile = "C:\\Games\\rustserver\\log.txt";
    # don't initialize a graphics device (allows running without a GPU)
    nographics = true;
    # true to suppress crash dialog
    silent-crashes = true;
  };
  # Optional group: Parameters that should be passed to the server application
  #  with a plus sign `+` prefix
  plusParams:
  {
    # Optional group: Parameters that should be prefixed with `+server.`
    server:
    {
      # primary game listen IP, or 0.0.0.0 to bind all interfaces
      ip = "0.0.0.0";
      # primary game listen port
      port = 28015;
      # server browser query port; can be the same as RCON port
      queryport = 28016;
      # custom map name, or "Procedural Map" for seed-generated map
      level = "Procedural Map";
      # map size
      worldsize = 4500;
      # maximum concurrent player connections allowed
      maxplayers = 50;
      # server name advertised to game clients
      hostname = "My Cool Server";
      # server details advertised to game clients
      description = "This is a pretty cool server";
      # server web site URL advertised to game clients
      url = "http://my.cool.server";
      # server banner image advertised to game clients
      headerimage = "http://my.cool.server/image.jpg";
      # number of updates sent to each player every second
      #tickrate = 10;
      # number of seconds between state saves to disk
      #saveinterval = 600;
      # message displayed to clients on session start
      motd = "Welcome to my cool server";
      # log F7 reports locally
      printReportsToConsole = 1
      # server browser tags to advertise - see facepunch wiki
      tags = "monthly,vanilla,NA"
      # game mode - see facepunch wiki
      gamemode = "vanilla"
    };
    # Optional group: RCON parameters, prefixed with `+rcon.`
    # NOTE: These will be overridden by rustLaunchSite's own RCON configuration
    #  if passthrough is enabled, so it's only necessary to specify them if the
    #  server actually needs different values from rustLaunchSite
    rcon:
    {
      # ip = "0.0.0.0";
      # port = 28016;
      # NOTE: `web` is always overwritten by rustLaunchSite
    };
    # Optional group: Rust+ parameters, prefixed with `+app.`
    app:
    {
      # Rust+ listen port; set to -1 to disable Rust+, omit to let server choose
      port = 28083;
      # Rust+ listen IP address to bind
      # listenip = "0.0.0.0";
      # Rust+ public IP to advertise to game clients
      # publicip = "0.0.0.0";
    };
    # Optional group: Parameters that should be prefixed with `+fps.`
    fps:
    {
      # server simulation framerate
      #limit = 256;
    };
    # Optional group; control halloween NPC population
    halloween:
    {
      # Population active on the server, per square km (default 0)
      # murdererpopulation = 4.0;
      # scarecrowpopulation = 4.0;
    };
  };
};
