name: rustLaunchSite

on:
  push:
  pull_request:
    branches: [ $default-branch ]
  workflow_dispatch:

# needed for vcpkg caching
permissions:
  contents: write

# env vars common to all jobs
env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  # VCPKG_FEATURE_FLAGS: dependencygraph
  VCPKG_DISABLE_METRICS: true
  VCPKG_ROOT: "${{ github.workspace }}/vcpkg"

jobs:
  build:
    strategy:
      matrix:
        include:
          - {os: windows-latest, tripletbase: x64-mingw-static,   buildtype: minsizerel, msystem: MINGW64, shell: "msys2 {0}"}
          - {os: windows-latest, tripletbase: x64-windows-static, buildtype: minsizerel, msystem: MSVC,    shell: "cmd"      }

    name: "${{ github.workflow }}.${{ matrix.os }}.${{ matrix.tripletbase }}-${{ matrix.buildtype }}"
    runs-on: ${{ matrix.os }}

    env:
      VCPKG_DEFAULT_TRIPLET: "${{ matrix.tripletbase }}-${{ matrix.buildtype }}"
      VCPKG_DEFAULT_HOST_TRIPLET: "${{ matrix.tripletbase }}-${{ matrix.buildtype }}"

    defaults:
      run:
        shell: ${{ matrix.shell }}

    steps:
      - name: Setup MSVC environment (1/3)
        if: ${{ matrix.msystem == 'MSVC' }}
        uses: ilammy/msvc-dev-cmd@v1
        with:
            arch: x64
      - name: Setup MSVC environment (2/3)
        if: ${{ matrix.msystem == 'MSVC' }}
        run: choco install cmake git ninja
      - name: Setup MSVC environment (3/3)
        id: set-env-msvc
        if: ${{ matrix.msystem == 'MSVC' }}
        shell: bash
        run: |
          echo "SCRIPT_PATH=${GITHUB_WORKSPACE}/.github/scripts/setenv.bat" | sed 's|/|\\|g' >> "${GITHUB_OUTPUT}"
          echo "GITHUB_OUTPUT=${GITHUB_OUTPUT} - contents:"
          cat "${GITHUB_OUTPUT}"

      - name: Setup MSYS2 environment (1/2)
        if: ${{ matrix.msystem != 'MSVC' }}
        uses: msys2/setup-msys2@v2
        with:
          msystem: ${{ matrix.msystem }}
          update: true
          install: >-
            curl
            git
            make
          pacboy: >-
            cmake:p
            ninja:p
            toolchain:p
      - name: Setup MSYS2 environment (2/2)
        id: set-env-msys
        if: ${{ matrix.msystem != 'MSVC' }}
        run: |
          git config --global core.autocrlf input
          echo "SCRIPT_PATH=${GITHUB_WORKSPACE}/.github/scripts/setenv.sh" | sed 's|\\|/|g' >> "${GITHUB_OUTPUT}"
          echo "GITHUB_OUTPUT=${GITHUB_OUTPUT} - contents:"
          cat "${GITHUB_OUTPUT}"

      - name: Setup common environment
        id: set-env
        shell: bash
        run: echo "${{ steps.set-env-msvc.outputs.SCRIPT_PATH }}${{ steps.set-env-msys.outputs.SCRIPT_PATH }}" >> "${GITHUB_OUTPUT}"

      - name: Setup git workspace
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Setup vcpkg
        id: vcpkg-init
        uses: johnwason/vcpkg-action@v6
        with:
          manifest-dir: "${{ github.workspace }}"
          triplet: "${{ matrix.tripletbase }}-${{ matrix.buildtype }}"
          token: ${{ github.token }}
          github-binarycache: true
      - name: Scrub vcpkg output (MSVC)
        id: vcpkg-msvc
        if: ${{ matrix.msystem == 'MSVC' }}
        shell: bash
        run: |
          echo "${{ steps.vcpkg-init.outputs.vcpkg-cmake-config }}" | sed 's|/|\\|g' >> "${GITHUB_OUTPUT}"
          echo "GITHUB_OUTPUT=${GITHUB_OUTPUT} - contents:"
          cat "${GITHUB_OUTPUT}"
      - name: Scrub vcpkg output (MSYS)
        id: vcpkg-msys
        if: ${{ matrix.msystem != 'MSVC' }}
        run: |
          echo "${{ steps.vcpkg-init.outputs.vcpkg-cmake-config }}" | sed 's|\\|/|g' >> "${GITHUB_OUTPUT}"
          echo "GITHUB_OUTPUT=${GITHUB_OUTPUT} - contents:"
          cat "${GITHUB_OUTPUT}"
      - name: Consolidate vcpkg outputs
        id: vcpkg
        shell: bash
        run: echo "${{ steps.vcpkg-msvc.outputs.vcpkg-cmake-config }}${{ steps.vcpkg-msys.outputs.vcpkg-cmake-config }}" >> "${GITHUB_OUTPUT}"

      - name: Configure project
        run: |
          ${{ steps.set-env.outputs.SCRIPT_PATH }}
          cmake ${{ steps.vcpkg.outputs.vcpkg-cmake-config }} --preset "${{ matrix.tripletbase }}-${{ matrix.buildtype }}"
      - name: Build project
        run: |
          ${{ steps.set-env.outputs.SCRIPT_PATH }}
          cmake --build "${{ github.workspace }}/out/build/${{ matrix.tripletbase }}-${{ matrix.buildtype }}"
      - name: Stage project
        run: |
          ${{ steps.set-env.outputs.SCRIPT_PATH }}
          cmake --install "${{ github.workspace }}/out/build/${{ matrix.tripletbase }}-${{ matrix.buildtype }}"

      - name: Package and upload project
        uses: actions/upload-artifact@v4
        with:
          name: "${{ github.workflow }}-${{ github.job }}-${{ github.run_number }}-${{ github.run_id }}-${{ matrix.os }}-${{ matrix.tripletbase }}-${{ matrix.buildtype }}"
          path: "${{ github.workspace }}/out/install/${{ matrix.tripletbase }}-${{ matrix.buildtype }}"
