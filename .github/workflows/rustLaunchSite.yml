name: rustLaunchSite

on:
  push:
  pull_request:
    branches: [ $default-branch ]
  workflow_dispatch:

# needed for vcpkg caching
permissions:
  contents: write

# env vars common to all jobs
env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  # VCPKG_BINARY_SOURCES: "clear;x-gha,readwrite"
  VCPKG_DISABLE_METRICS: true

jobs:
  build:
    strategy:
      matrix:
        triplet: [x64-linux, x64-windows-static] #[x64-linux, x64-mingw-static, x64-windows-static]
        buildtype: [debug, release]
        include:
          - triplet: x64-linux
            os: ubuntu-latest
          # - triplet: x64-mingw-static
          #   os: windows-latest
          - triplet: x64-windows-static
            os: windows-latest

    name: "${{ github.workflow }}.${{ matrix.os }}.${{ matrix.triplet }}.${{ matrix.buildtype }}"
    runs-on: ${{ matrix.os }}

    env:
      FIX_PATH: "\
        ${{ matrix.triplet == 'x64-linux' && 'sed s|\\\\|/|g' || '' }}\
        ${{ matrix.triplet == 'x64-mingw-static' && 'sed s|\\\\|/|g' || '' }}\
        ${{ matrix.triplet == 'x64-windows-static' && 'sed s|/|\\\\|g' || '' }}"
      MSYSTEM: "\
        ${{ matrix.triplet == 'x64-linux' && 'LINUX' || '' }}\
        ${{ matrix.triplet == 'x64-mingw-static' && 'MINGW64' || '' }}\
        ${{ matrix.triplet == 'x64-windows-static' && 'MSVC' || '' }}"
      SCRIPT_EXT: "\
        ${{ matrix.triplet == 'x64-linux' && '.sh' || '' }}\
        ${{ matrix.triplet == 'x64-mingw-static' && '.sh' || '' }}\
        ${{ matrix.triplet == 'x64-windows-static' && '.bat' || '' }}"
      VCPKG_DEFAULT_TRIPLET: ${{ matrix.triplet }}
      VCPKG_DEFAULT_HOST_TRIPLET: ${{ matrix.triplet }}

    defaults:
      run:
        shell: "\
          ${{ matrix.triplet == 'x64-linux' && 'bash' || '' }}\
          ${{ matrix.triplet == 'x64-mingw-static' && 'msys2 {0}' || '' }}\
          ${{ matrix.triplet == 'x64-windows-static' && 'cmd' || '' }}"

    steps:
      # - name: Setup secrets
      #   uses: webfactory/ssh-agent@v0.9.1
      #   with:
      #     ssh-private-key: |
      #       ${{ secrets.SSH_KEY_CTRLC }}
      #       ${{ secrets.SSH_KEY_SRVLIB }}

      - name: Setup Linux environment
        if: ${{ env.MSYSTEM == 'LINUX' }}
        uses: awalsh128/cache-apt-pkgs-action@latest
        with:
          packages: cmake # ninja
          version: 1.0

      - name: Setup MSVC environment
        if: ${{ env.MSYSTEM == 'MSVC' }}
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: x64
          # sdk: "10.1.22621.3233"
          # toolset: "14.40.33810"
          uwp: false
          # vsversion: "17.10.35013.160"
      # this seems to not currently be needed, and just wastes extra time
      # - name: Setup MSVC environment (2/2)
      #   if: ${{ env.MSYSTEM == 'MSVC' }}
      #   run: |
      #     choco install cmake ninja

      - name: Setup MSYS2 environment (1/2)
        if: ${{ env.MSYSTEM == 'MINGW64' }}
        shell: bash
        run: |
          git config --global core.autocrlf input
      - name: Setup MSYS2 environment (2/2)
        if: ${{ env.MSYSTEM == 'MINGW64' }}
        uses: msys2/setup-msys2@v2
        with:
          msystem: ${{ env.MSYSTEM }}
          update: false
          pacboy: >-
            cmake:p
            ninja:p
            toolchain:p
          # cache: true
          # release: false

      - name: Setup common environment
        shell: bash
        run: |
          export SETENV_PATH="${GITHUB_WORKSPACE}/.github/scripts/setenv${SCRIPT_EXT}"
          echo "SETENV_PATH=${SETENV_PATH}" | ${FIX_PATH} >> "${GITHUB_ENV}"
          export VCPKG_ROOT="${GITHUB_WORKSPACE}/vcpkg"
          echo "VCPKG_ROOT=${VCPKG_ROOT}" | ${FIX_PATH} >> "${GITHUB_ENV}"
          export VCPKG_BOOT="./bootstrap-vcpkg${SCRIPT_EXT}"
          echo "VCPKG_BOOT=${VCPKG_BOOT}" | ${FIX_PATH} >> "${GITHUB_ENV}"

      # clone host repo
      - name: Clone git repos (1/4)
        uses: actions/checkout@v5
      # clone ctrl-c dependency repo
      - name: Clone git repos (2/4)
        uses: actions/checkout@v5
        with:
          repository: HunterZ/ctrl-c
          path: subprojects/ctrl-c
      # clone SrvLib dependency repo
      - name: Clone git repos (3/4)
        uses: actions/checkout@v5
        with:
          repository: HunterZ/SrvLib
          path: subprojects/SrvLib
      # clone ValveFileVDF dependency repo
      - name: Clone git repos (4/4)
        uses: actions/checkout@v5
        with:
          repository: HunterZ/ValveFileVDF
          path: subprojects/ValveFileVDF

      # vcpkg internal caching is currently broken; cache everything in its
      #  install and build trees
      # note that build type isn't considered in the cache key, because I now
      #  force use of release-flavored dependencies
      - name: Setup vcpkg (1/4)
        uses: actions/cache/restore@v4
        with:
          key:
            # only hash on files present without configure/build
            # note that this is separate from the files used to decide whether
            #  to update the cache later
            cache-build-${{ matrix.triplet }}-${{ hashFiles('CMakeLists.txt', 'CMakePresets.json', 'vcpkg.json') }}
          path: |
            ${{ github.workspace }}/cache_hash.txt
            ${{ github.workspace }}/out/build/**/vcpkg_installed
            ${{ github.workspace }}/vcpkg
      - name: Setup vcpkg (2/4)
        uses: actions/checkout@v5
        with:
          repository: Microsoft/vcpkg
          path: vcpkg
          fetch-depth: 1
          show-progress: true
          lfs: false
      - name: Setup vcpkg (3/4)
        uses: actions/github-script@v8
        with:
          script: |
            core.exportVariable('ACTIONS_CACHE_URL', process.env.ACTIONS_CACHE_URL || '');
            core.exportVariable('ACTIONS_RUNTIME_TOKEN', process.env.ACTIONS_RUNTIME_TOKEN || '');
      - name: Setup vcpkg (4/4)
        run: >-
          ${{ env.SETENV_PATH }} &&
          pushd ${{ env.VCPKG_ROOT }} &&
          ${{ env.VCPKG_BOOT }} -disableMetrics &&
          popd

      - name: Configure project
        run: >-
          ${{ env.SETENV_PATH }} &&
          cmake --preset "${{ matrix.triplet }}"

      - name: Build and stage project
        run: >-
          ${{ env.SETENV_PATH }} &&
          cmake --build --preset "${{ matrix.triplet }}-${{ matrix.buildtype }}" --target install

      - name: Package and upload project
        uses: actions/upload-artifact@v4
        with:
          name: "${{ github.workflow }}-${{ github.job }}-${{ github.run_number }}-${{ github.run_id }}-${{ matrix.os }}-${{ matrix.triplet }}-${{ matrix.buildtype }}"
          path: "${{ github.workspace }}/out/install/${{ matrix.triplet }}"

      # hash ALL relevant files, and return whether a cache save is warranted
      - name: Update vcpkg cache (1/2)
        shell: bash
        run: |
          CHECK_RESULT=$(bash "${{ github.workspace }}/.github/scripts/checkcache.sh" "${{ hashFiles('CMakeLists.txt', 'CMakePresets.json', 'vcpkg.json', 'out/build/**/CMakeCache.txt', 'out/build/**/vcpkg_installed/compiler-file-hash-cache.json', 'out/build/**/vcpkg_installed/status') }}")
          echo CHECK_OUTPUT=$CHECK_RESULT >> $GITHUB_OUTPUT
        id: cache_vcpkg
      # save cache if warranted
      - name: Update vcpkg cache (2/2)
        if: ${{ steps.cache_vcpkg.outputs.CHECK_OUTPUT == 'true' }}
        uses: actions/cache/save@v4
        with:
          key:
            # only hash on files present without configure/build
            cache-build-${{ matrix.triplet }}-${{ hashFiles('CMakeLists.txt', 'CMakePresets.json', 'vcpkg.json') }}
          path: |
            ${{ github.workspace }}/cache_hash.txt
            ${{ github.workspace }}/out/build/**/vcpkg_installed
            ${{ github.workspace }}/vcpkg
