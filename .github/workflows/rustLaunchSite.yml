name: Builder rustLaunchSite

on:
  push:
  pull_request:
    branches: [ $default-branch ]
  workflow_dispatch:

jobs:
  rustLaunchSite:
    strategy:
      matrix:
        # only Windows for now
        os: [ windows-latest ]
        # only MinSizeRel for now
        buildtype: [ minsizerel ]
        include:
          # unique set of triplet(s) for each OS
          # NOTE: at least one triplet must be defined per OS
          - os: windows-latest
            triplet: x64-mingw-static

    name: ${{ github.workflow }}-${{ matrix.os }}-${{ matrix.triplet }}-${{ matrix.buildtype }}
    runs-on: ${{ matrix.os }}

    defaults:
      # use MSYS2 bash as the default shell
      run:
        shell: msys2 {0}

    env:
      # keep everyone on the same page regarding triplet when running vcpkg
      VCPKG_DEFAULT_TRIPLET: ${{ matrix.triplet }}
      VCPKG_DEFAULT_HOST_TRIPLET: ${{ matrix.triplet }}

    steps:
      - name: Setup MSYS2
        uses: msys2/setup-msys2@v2.22.0
        with:
          msystem: MINGW64
          update: true
          install: >-
            curl
            git
            make
          pacboy: >-
            cmake:p
            ninja:p
            toolchain:p

      - name: Add MinGW64 to MSYS2 shell PATH
        run: export PATH="${RUNNER_TEMP}/msys64/mingw64/bin:${PATH}"

      - name: Dump tooling info
        run: |
          which cmake && cmake --version
          which git && git --version
          which gcc && gcc --version

      - name: Dump environment
        run: set

      - name: Dump path
        run: echo $PATH

      - name: Dump working directory
        run: pwd

      - name: Setup git line endings
        run: git config --global core.autocrlf input

      - name: Setup submodules
        uses: actions/checkout@v4.1.1
        with:
          submodules: true

      - name: CMake configure
        run: cmake --preset ${{ matrix.triplet }}-${{ matrix.buildtype }}

      - name: CMake build
        run: cmake --build "${{ github.workspace }}/out/build/${{ matrix.triplet }}-${{ matrix.buildtype }}"

      # - name: Setup CMake
      #   uses: lukka/get-cmake@latest

      # Setup vcpkg: ensures vcpkg is downloaded and built.
      # Since vcpkg.json is being used later on to install the packages
      # when `run-cmake` runs, no packages are installed at this time
      # (and vcpkg does not run).
      # - name: Setup vcpkg
      #   uses: lukka/run-vcpkg@v11 # Always specify the specific _version_ of the
                                  # action you need, `v11` in this case to stay up
                                  # to date with fixes on the v11 branch.
        #with:
          # directory containing vcpkg sources
          # vcpkgDirectory: '${{ github.workspace }}/vcpkg'

          # This is only needed if the command `vcpkg install` must run at this step.
          # Instead it is highly suggested to let `run-cmake` to run vcpkg later on
          # using the vcpkg.cmake toolchain. The default is `false`.
          # runVcpkgInstall: true

          # This is only needed if `runVpkgInstall` is `true`.
          # This glob expression used to locate the vcpkg.json and  use
          # its directory location as `working directory` when running `vcpkg install`.
          # Change it to match a single manifest file you want to use.
          # Note: do not use `${{ github.context }}` to compose the value as it
          # contains backslashes that would be misinterpreted. Instead
          # compose a value relative to the root of the repository using
          # `**/path/from/root/of/repo/to/vcpkg.json` to match the desired `vcpkg.json`.
          # vcpkgJsonGlob: '**/vcpkg.json'

      # - name: Run CMake consuming CMakePreset.json and run vcpkg to build packages
      #   uses: lukka/run-cmake@v10
      #   with:
          # Path to CMakeLists.txt
          # cmakeListsTxtPath: '${{ github.workspace }}/CMakeLists.txt'

          # You could use CMake workflow presets defined in the CMakePresets.json
          # with just this line below. Note this one cannot be used with any other
          # preset input, it is mutually exclusive.
          # workflowPreset: 'workflow-name'

          # This is the name of the CMakePresets.json's configuration to use to generate
          # the project files. This configuration leverages the vcpkg.cmake toolchain file to
          # run vcpkg and install all dependencies specified in vcpkg.json.
          # configurePreset: 'ninja-multi-vcpkg'
      #   configurePreset: '${{ matrix.triplet }}-${{ matrix.buildtype }}'

          # Additional arguments can be appended to the cmake command.
          # This is useful to reduce the number of CMake's Presets since you can reuse
          # an existing preset with different variables.
          # configurePresetAdditionalArgs: "['-DENABLE_YOUR_FEATURE=1']"

          # This is the name of the CMakePresets.json's configuration to build the project.
          # buildPreset: 'ninja-multi-vcpkg'
          # Additional arguments can be appended when building, for example to specify the
          # configuration to build.
          # This is useful to reduce the number of CMake's Presets you need in CMakePresets.json.
          # buildPresetAdditionalArgs: "['--config Release']"

          # This is the name of the CMakePresets.json's configuration to test the project with.
          # testPreset: 'ninja-multi-vcpkg'
          # Additional arguments can be appended when testing, for example to specify the config
          # to test.
          # This is useful to reduce the number of CMake's Presets you need in CMakePresets.json.
          # testPresetAdditionalArgs: "['--config Release']"
