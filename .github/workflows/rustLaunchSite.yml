name: rustLaunchSite

on:
  push:
  pull_request:
    branches: [ $default-branch ]
  workflow_dispatch:

# needed for vcpkg caching
permissions:
  contents: write

# env vars common to all jobs
env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  VCPKG_BINARY_SOURCES: "clear;x-gha,readwrite"
  # VCPKG_FEATURE_FLAGS: dependencygraph
  VCPKG_DISABLE_METRICS: true
  # VCPKG_ROOT: "${{ github.workspace }}/vcpkg"

jobs:
  build:
    strategy:
      matrix:
        buildtype: [debug, release]
        include:
          - {os: windows-latest, triplet: x64-mingw-static,   msystem: MINGW64, shell: "msys2 {0}"}
          - {os: windows-latest, triplet: x64-windows-static, msystem: MSVC,    shell: "cmd"      }

    name: "${{ github.workflow }}.${{ matrix.os }}.${{ matrix.triplet }}-${{ matrix.buildtype }}"
    runs-on: ${{ matrix.os }}

    env:
      VCPKG_DEFAULT_TRIPLET: "${{ matrix.triplet }}"
      VCPKG_DEFAULT_HOST_TRIPLET: "${{ matrix.triplet }}"

    defaults:
      run:
        shell: ${{ matrix.shell }}

    steps:
      - name: Setup MSVC environment (1/3)
        if: ${{ matrix.msystem == 'MSVC' }}
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: x64
          sdk: "10.0.22621.0"
          toolset: "14.39.33519"
          uwp: false
          vsversion: "17.0"
      - name: Setup MSVC environment (2/3)
        if: ${{ matrix.msystem == 'MSVC' }}
        run: |
          choco install cmake ninja
      - name: Setup MSVC environment (3/3)
        if: ${{ matrix.msystem == 'MSVC' }}
        shell: bash
        run: |
          export FIX_PATH='sed s|/|\\|g'
          echo "FIX_PATH=${FIX_PATH}" >> "${GITHUB_ENV}"
          export SCRIPT_EXT=".bat"
          echo "SCRIPT_EXT=${SCRIPT_EXT}" >> "${GITHUB_ENV}"

      - name: Setup MSYS2 environment (1/2)
        if: ${{ matrix.msystem != 'MSVC' }}
        uses: msys2/setup-msys2@v2
        with:
          msystem: ${{ matrix.msystem }}
          update: true
          release: false
          pacboy: >-
            cmake:p
            ninja:p
            toolchain:p
      - name: Setup MSYS2 environment (2/2)
        if: ${{ matrix.msystem != 'MSVC' }}
        shell: bash
        run: |
          git config --global core.autocrlf input
          export FIX_PATH='sed s|\\|/|g'
          echo "FIX_PATH=${FIX_PATH}" >> "${GITHUB_ENV}"
          export SCRIPT_EXT=".sh"
          echo "SCRIPT_EXT=${SCRIPT_EXT}" >> "${GITHUB_ENV}"

      - name: Setup common environment
        shell: bash
        run: |
          export SETENV_PATH="${GITHUB_WORKSPACE}/.github/scripts/setenv${SCRIPT_EXT}"
          echo "SETENV_PATH=${SETENV_PATH}" | ${FIX_PATH} >> "${GITHUB_ENV}"
          export VCPKG_ROOT="${GITHUB_WORKSPACE}/vcpkg"
          echo "VCPKG_ROOT=${VCPKG_ROOT}" | ${FIX_PATH} >> "${GITHUB_ENV}"
          export VCPKG_BOOT="./bootstrap-vcpkg${SCRIPT_EXT}"
          echo "VCPKG_BOOT=${VCPKG_BOOT}" | ${FIX_PATH} >> "${GITHUB_ENV}"

      - name: Setup git workspace
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Setup vcpkg (1/3)
        uses: actions/checkout@v4
        with:
          repository: Microsoft/vcpkg
          path: vcpkg
          fetch-depth: 1
          show-progress: true
          lfs: false
      - name: Setup vcpkg (2/3)
        uses: actions/github-script@v7
        with:
          script: |
            core.exportVariable('ACTIONS_CACHE_URL', process.env.ACTIONS_CACHE_URL || '');
            core.exportVariable('ACTIONS_RUNTIME_TOKEN', process.env.ACTIONS_RUNTIME_TOKEN || '');
      - name: Setup vcpkg (3/3)
        run: >-
          ${{ env.SETENV_PATH }} &&
          pushd ${{ env.VCPKG_ROOT }} &&
          ${{ env.VCPKG_BOOT }} -disableMetrics &&
          popd

      - name: Configure project
        run: >-
          ${{ env.SETENV_PATH }} &&
          cmake --preset "${{ matrix.triplet }}"
      - name: Build and stage project
        run: >-
          ${{ env.SETENV_PATH }} &&
          cmake --build --preset "${{ matrix.triplet }}-${{ matrix.buildtype }}" --target install

      - name: Package and upload project
        uses: actions/upload-artifact@v4
        with:
          name: "${{ github.workflow }}-${{ github.job }}-${{ github.run_number }}-${{ github.run_id }}-${{ matrix.os }}-${{ matrix.triplet }}-${{ matrix.buildtype }}"
          path: "${{ github.workspace }}/out/install/${{ matrix.triplet }}"
